./src/
├── cloudfs                        The directory containing skeleton code for CloudFS
│   ├── cloudfs.c                  The skeleton code of CloudFS FUSE implementation
│   ├── cloudfs.h
│   ├── wrapper.cpp                Wrapper for self-defined FUSE function. This wapper is used to build a bridge between C and C++
│   ├── wrapper.h
│   ├── Lancerfs.cpp               The skeleton code of CloudFS FUSE implementation in C++
│   ├── Lancerfs.h  
│   ├── duplication.cpp            The deduplication layer that detects duplication among files in filesystem and deduplicat 
│   ├── duplication.h  
│   ├── cache_controller.cpp       The cache layer that cache data into local filesystem and SSD, in order to reduce cloud cost and improve latency 
│   ├── cache_controller.h  
│   ├── snapshot.cpp               The snapshot layer that creates, deletes, restores, gabarge collects snapshots 
│   ├── snapshot.h 
│   ├── log.cpp                    The logger that provides unified logging interface to any component/layer in CloudFS
│   ├── log.h 
│   ├── transmission.cpp           The transportation layer that provides data sending/receiving
│   ├── transmission.h 
│   ├── lock.cpp                   The locker that provides primitives to protest shared data 
│   ├── lock.h 
│   └── main.c                     The main function for CloudFS that parses command line to extract options
├── cloud-lib                      The cloud api library           
│   ├── cloudapi.c                 The wrapper functions of libs3
│   ├── cloudapi.h
│   ├── cloud-example.c            An example of showing how to use functions in cloudapi.h
├── dedup-lib                      The rabin segmentation library           
│   ├── dedup.h	                   Interface header
│   ├── Makefile                   
│   ├── msb.c                      Helper functions
│   ├── msb.h
│   ├── rabin-example.c            An example of showing how to use functions in dedup.h
│   ├── rabinpoly.c                Implementation of rabin fingerprinting algorithm
│   ├── rabinpoly.h
├── include
│   └── libs3.h                    The header file of libs3
│   └── dedup.h                    The interface header file of libdedup(src in ../dedup-lib; staged here)
├── lib
│   └── libs3.a                    The library file of libs3. To get different binary, you can download libs3 from its website, and compile it by yourself.
│   └── libdedup.a                 The rabin segmentation library (compiled in ../dedup-lib and staged here)
├── Makefile                       "make" generates the binary "src/build/bin/cloudfs", and "make example" generates "src/build/bin/example"
├── README
├── s3-client                      An example of how to use the original libs3 library
│   ├── include
│   │   └── libs3.h
│   ├── lib
│   │   └── libs3.a
│   ├── Makefile
│   ├── src
│   │   └── s3.c
│   └── test.sh
├── s3-server
│   ├── run_server                  An example script that runs S3 server in default port
│   └── s3server.pyc                Compiled python code of web server. Run ``python ./s3server.py --help" to list all the options
└── scripts
    ├── small_test.tar.gz           Test files from small to large
    ├── big_test.tar.gz
    ├── large_test.tar.gz
    ├── cloudfs_controller.sh       A script that mounts CloudFS 
    ├── format_disks.sh             A script that formats SSD and HDD into Ext2 file system
    ├── mount_disks.sh              A script that mounts SSD and HDD
    ├── README
    ├── test_part1.sh               A test script for part one
    ├── reset.sh                    clean up to go back to default state
    ├── kill_server.sh              Find and kill s3-server
    ├── functions.sh                Common functions used for testing
    └── umount_disks.sh             A script that umounts SSD 

1. Run cloud-example.c

   (a) Build example:
       Under src directory, run the command:
       make cloud-example
  
   (b) Create a temporary file:
       /tmp/README
       
   (c) Run S3 server under src/s3-server/:
       ./run_server &
    or:
       python ./s3server.pyc &

   (d) Run example:
       ./build/bin/cloud-example
       
2. Extract cloud cost from S3 server
   Assume your server binds to localhost:8888
   You can use:
   curl http://localhost:8888/admin/stat 
   To get cloud usage statistics:
    NumRequests: number of requests S3 server received from the boot 
    NumReadBytes: number of bytes S3 server sent out from the boot 
    CurrentUsage: total size of files S3 server store currently (assume the server is empty at the beginning)
    MaxUsage: maximum usage of S3 server from the boot

   
3. Run rabin-example.c 

   (a) Build example:
       Under src directory, run the command:
       make rabin-example
  
   (b) Create a temporary files:
	   dd if=/dev/urandom of=/tmp/bigfile bs=1024 count=20
	   dd if=/dev/urandom of=/tmp/smallfile bs=1 count=1
       
   (c) Run example:
       $cat /tmp/bigfile | ./build/bin/rabin-example
       $cat /tmp/smallfile /tmp/bigfile | ./build/bin/rabin-example
     
	   You can also specify other parameters. See rabin-example -h
